import numpy as np
import pygame

FPS = 60

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
CYAN = (0, 255, 255)
YELLOW = (255, 255, 0)
PURPLE = (255, 0, 255)
ORANGE = (255, 165, 0)
BOARD_BORDER = (40, 40, 40)
BOARD_LINE = (70, 70, 70)

# Game dimensions
CELL_SIZE = 30
BOARD_WIDTH = 10
BOARD_HEIGHT = 40
GRID_HEIGHT = 20
BOARD_OFFSET_X = 250
BOARD_OFFSET_Y = 50
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 700
SIDEBAR_OFFSET = 50
SIDEBAR_WIDTH = 150
PREVIEW_PIECE_HEIGHT = 80

# Pieces in starting position
PIECES = {
    'I': (np.array([[0, 0, 0, 0],
                    [1, 1, 1, 1],
                    [0, 0, 0, 0],
                    [0, 0, 0, 0]]), CYAN),
    'O': (np.array([[1, 1],
                    [1, 1]]), YELLOW),
    'T': (np.array([[0, 1, 0],
                    [1, 1, 1],
                    [0, 0, 0]]), PURPLE),
    'S': (np.array([[0, 1, 1],
                    [1, 1, 0],
                    [0, 0, 0]]), GREEN),
    'Z': (np.array([[1, 1, 0],
                    [0, 1, 1],
                    [0, 0, 0]]), RED),
    'J': (np.array([[1, 0, 0],
                    [1, 1, 1],
                    [0, 0, 0]]), BLUE),
    'L': (np.array([[0, 0, 1],
                    [1, 1, 1],
                    [0, 0, 0]]), ORANGE)
}

# SRS Wall Kicks
# Determines what order tests are done for spins
WALL_KICK_DATA = {
    'JLSTZ': [
        [(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],  # 0>>1
        [(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],      # 1>>0
        [(0, 0), (1, 0), (1, -1), (0, 2), (1, 2)],      # 1>>2
        [(0, 0), (-1, 0), (-1, 1), (0, -2), (-1, -2)],  # 2>>1
        [(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)],     # 2>>3
        [(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],   # 3>>2
        [(0, 0), (-1, 0), (-1, -1), (0, 2), (-1, 2)],   # 3>>0
        [(0, 0), (1, 0), (1, 1), (0, -2), (1, -2)]      # 0>>3
    ],
    'I': [
        [(0, 0), (-2, 0), (1, 0), (-2, -1), (1, 2)],    # 0>>1
        [(0, 0), (2, 0), (-1, 0), (2, 1), (-1, -2)],    # 1>>0
        [(0, 0), (-1, 0), (2, 0), (-1, 2), (2, -1)],    # 1>>2
        [(0, 0), (1, 0), (-2, 0), (1, -2), (-2, 1)],    # 2>>1
        [(0, 0), (2, 0), (-1, 0), (2, 1), (-1, -2)],    # 2>>3
        [(0, 0), (-2, 0), (1, 0), (-2, -1), (1, 2)],    # 3>>2
        [(0, 0), (1, 0), (-2, 0), (1, -2), (-2, 1)],    # 3>>0
        [(0, 0), (-1, 0), (2, 0), (-1, 2), (2, -1)]     # 0>>3
    ]
}